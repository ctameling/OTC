#print(factor_i)
#factor = factor + factor_i
}
pi
pi = round(pnorm((boundary[2] +24.996)/sqrt(12.473), mean=0, sd=1), 4)
pi
(boundary[2] +24.996)/sqrt(12.473)
round((boundary[3] +24.996)/sqrt(12.473),2)
round((boundary[4] +24.996)/sqrt(12.473),2)
for (i in 2:8){
pi_i = round(pnorm(round((boundary[i+1] +24.996)/sqrt(12.473),2)), 4) - round(pnorm(round((boundary[i] +24.966)/sqrt(12.473) ,2)), 4)
print(pi_i)
pi = pi + pi_i
#factor_i = round((sum((boundary[i] < data) & (data <= boundary[i+1])) - pi_i * length(data))^2 / (pi_i * length(data)), 4)
#print(factor_i)
#factor = factor + factor_i
}
1-pi
pi = round(pnorm((boundary[2] +24.996)/sqrt(12.473), mean=0, sd=1), 4)
for (i in 2:8){
pi_i = round(pnorm(round((boundary[i+1] +24.996)/sqrt(12.473),2)), 4) - round(pnorm(round((boundary[i] +24.966)/sqrt(12.473) ,2)), 4)
print(pi_i)
pi = pi + pi_i
#factor_i = round((sum((boundary[i] < data) & (data <= boundary[i+1])) - pi_i * length(data))^2 / (pi_i * length(data)), 4)
#print(factor_i)
#factor = factor + factor_i
}
pi
pi_last = (1 - round(pnorm((boundary[9] +24.996)/sqrt(12.473)),4))
pi_last
pi = round(pnorm((boundary[2] +24.996)/sqrt(12.473), mean=0, sd=1), 4)
for (i in 2:8){
pi_i = round(pnorm(round((boundary[i+1] +24.996)/sqrt(12.473),2)), 4) - round(pnorm(round((boundary[i] +24.996)/sqrt(12.473) ,2)), 4)
print(pi_i)
pi = pi + pi_i
#factor_i = round((sum((boundary[i] < data) & (data <= boundary[i+1])) - pi_i * length(data))^2 / (pi_i * length(data)), 4)
#print(factor_i)
#factor = factor + factor_i
}
1-pi
pi = round(pnorm((boundary[2] +24.996)/sqrt(12.473), mean=0, sd=1), 4) *length(data)
pi
print(pi_i * length(data))
for (i in 2:8){
pi_i = round(pnorm(round((boundary[i+1] +24.996)/sqrt(12.473),2)), 4) - round(pnorm(round((boundary[i] +24.996)/sqrt(12.473) ,2)), 4)
print(pi_i * length(data))
pi = pi + pi_i
#factor_i = round((sum((boundary[i] < data) & (data <= boundary[i+1])) - pi_i * length(data))^2 / (pi_i * length(data)), 4)
#print(factor_i)
#factor = factor + factor_i
}
pi_last = (1 - round(pnorm((boundary[9] +24.996)/sqrt(12.473)),4)) * length(data)
pi_last
0.016*78
0.0016*78
pi = round(pnorm((boundary[2] +24.996)/sqrt(12.473), mean=0, sd=1), 4)
factor = round((sum((data <= boundary[2])) - pi * length(data))^2 / (pi * length(data)), 4)
for (i in 2:8){
pi_i = round(pnorm(round((boundary[i+1] +24.996)/sqrt(12.473),2)), 4) - round(pnorm(round((boundary[i] +24.996)/sqrt(12.473) ,2)), 4)
#print(pi_i)
#pi = pi + pi_i
factor_i = round((sum((boundary[i] < data) & (data <= boundary[i+1])) - pi_i * length(data))^2 / (pi_i * length(data)), 4)
print(factor_i)
factor = factor + factor_i
}
factor
pi_last = (1 - round(pnorm((boundary[9] +24.996)/sqrt(12.473)),4))
factor_last = round((sum((data > boundary[9])) - pi_last * length(data))^2 / (pi_last * length(data)), 4)
factor_last
(1- 0.1248)/0.1248
factor = round((sum((data <= boundary[2])) - pi * length(data))^2 / (pi * length(data)), 4)
factor
pi = round(pnorm((boundary[2] +24.996)/sqrt(12.473), mean=0, sd=1), 4)
factor = round((sum((data <= boundary[2])) - pi * length(data))^2 / (pi * length(data)), 4)
for (i in 2:8){
pi_i = round(pnorm(round((boundary[i+1] +24.996)/sqrt(12.473),2)), 4) - round(pnorm(round((boundary[i] +24.996)/sqrt(12.473) ,2)), 4)
#print(pi_i)
#pi = pi + pi_i
factor_i = round((sum((boundary[i] < data) & (data <= boundary[i+1])) - pi_i * length(data))^2 / (pi_i * length(data)), 4)
print(factor_i)
factor = factor + factor_i
}
pi_last = (1 - round(pnorm((boundary[9] +24.996)/sqrt(12.473)),4))
factor_last = round((1- 0.1248)/0.1248, 4)
factor + factor_last
sternschnuppen = round(rexp(57, rate=0.5), 2)
# exercise 12
set.seed(12)
sternschnuppen = round(rexp(57, rate=0.5), 2)
# exercise 12
krankmeldungen = c(51, 32, 26, 41, 50)
sum(krankmeldungen)
krankmeldungen * pi
prob = 0.2
krankmeldungen * prob
n_pi = krankmeldungen * prob
summands = (krankmeldungen - ni_pi)^2/n_pi
n_pi = krankmeldungen * prob
summands = (krankmeldungen - ni_pi)^2/n_pi
summands = (krankmeldungen - n_pi)^2/n_pi
paster(summands, collapse =" & ")
paste(summands, collapse =" & ")
sum(summands)
qchisq(0.99, df=4)
qchisq(0.99, df=5)
set.seed(12)
qq_plot_data = round(rnorm(5, mean=0.5), 4)
paste(qq_plot_data, collapse=', ')
set.seed(12)
sternschnuppen = round(rexp(57, rate=0.5), 2)
paste(sort(sternschnuppen), collapse = ', ')
qq_plot_data = round(rnorm(5, mean=0.5), 4)
paste(qq_plot_data, collapse=', ')
qq_plot_data = c(0.2277, 0.1847, -0.1283, 0.3935, 0.928)
paste(qq_plot_data, collapse=', ')
ggplot(data.frame(qq_plot_data), aes(sample=qq_plot_data)) + stat_qq(distribution=stat::qnorm)
library(ggplot2)
ggplot(data.frame(qq_plot_data), aes(sample=qq_plot_data)) + stat_qq(distribution=stat::qnorm)
ggplot(data.frame(qq_plot_data), aes(sample=qq_plot_data)) + stat_qq(distribution=stats::qnorm)
ggplot(data.frame(qq_plot_data), aes(sample=qq_plot_data)) + stat_qq(distribution=stats::qnorm) + stat_qq_line(distribution = stats:qnorm)
ggplot(data.frame(qq_plot_data), aes(sample=qq_plot_data)) + stat_qq(distribution=stats::qnorm) + stat_qq_line(distribution=stats::qnorm)
sternschnuppen = c(0.06, 0.12, 0.17, 0.2, 0.28, 0.3, 0.31, 0.33, 0.34, 0.4, 0.42, 0.49, 0.59, 0.6,
0.62, 0.68, 0.69, 0.79, 0.8, 0.82, 0.84, 0.87, 0.89, 0.91, 0.91, 0.94, 1.07,
1.19, 1.21, 1.36, 1.36, 1.48, 1.71, 1.73, 1.75, 1.82, 2.02, 2.02, 2.06, 2.14,
2.19, 2.32, 2.32, 2.6, 2.75, 3.01, 3.24, 3.4, 4.29, 4.83, 4.83, 5.18, 5.4, 5.42,
5.42, 6.07, 6.95)
paste(sort(sternschnuppen), collapse = ', ')
seq(min(sternschnuppen), max(sternschnuppen), length.out = 8)
(max(sternschnuppen) - min(sternschnuppen))/7
(max(sternschnuppen) - min(sternschnuppen))/7 + 0.06
round(seq(min(sternschnuppen), max(sternschnuppen), length.out = 8), 2)
pexp(1.04, rate=0.3)
round(pexp(1.04, rate=0.3), 2)
1 - exp(-0.3 * 1.04)
round(pexp(1.04, rate=0.3) - pexp(2.02, rate=0.3), 2)
exp(-0.3*1.04) - exp(-0.3*2.02)
round(exp(-0.3*1.04) - exp(-0.3*2.02), 2)
round(exp(-0.3*2.02) - exp(-0.3*3.00), 2)
round(exp(-0.3*3.00) - exp(-0.3*3.98), 2)
round(exp(-0.3*3.98) - exp(-0.3*4.96), 2)
round(exp(-0.3*4.96) - exp(-0.3*5.94), 2)
exp(-0.3 * 5.94#)
9
exp(-0.3 * 5.94)
0.27+0.19+0.14+0.1+0.08+0.06+0.17
sum(sternschnuppen < 1.04)
sum(sternschnuppen >= 1.04 & sternschnuppen < 2.02)
sum(sternschnuppen >= 2.02 & sternschnuppen < 3)
sum(sternschnuppen >= 3 & sternschnuppen < 3.98)
sum(sternschnuppen >= 3.98 & sternschnuppen < 4.96)
sum(sternschnuppen >= 4.96 & sternschnuppen < 5.94)
sum(sternschnuppen >= 5.94)
length(sternschnuppen)
round(0.27 * length(sternschnuppen), 2)
probs = c(0.27, 0.19, 0.14, 0.1, 0.08, 0.06, 0.16)
round(probs) * length(sternschnuppen), 2)
round(probs * length(sternschnuppen), 2)
count = c(26, 10, 9, 3, 3, 4, 2)
count = c(26, 10, 9, 3, 3, 4, 2)
probs = c(0.27, 0.19, 0.14, 0.1, 0.08, 0.06, 0.16)
n_pi = probs * length(sternschuppen)
n_pi = probs * length(sternschnuppen)
round((count - n_pi)^2/n_pi, 2)
sum(round((count - n_pi)^2/n_pi, 2))
7*0.8
5/7
# exercise 12
krankmeldungen = c(51, 32, 26, 41, 50)
prob = 0.2
n_pi = 200 * prob
n_pi = sum(krankmeldungen) * prob
n_pi
summands = (krankmeldungen - n_pi)^2/n_pi
summands
sum(summands)
qchisq(0.9, df = 4)
qchisq(0.95, df = 4)
pnrom(-0.5)
pnorm(-0.5)
pnorm(0.5)
1.5/5
qnorm(0.3)
(2-1/3)/(5+1/3)
qnorm(0.3125)
qnorm((3-1/3)/(5+1/3))
qnorm(2/6)
qnorm((2-3/8)/(5+1/4))
qnorm(1/10)
qnorm(5/42)
qnorm(2/16)
qq_plot_data = c(0.2277, 0.1847, -0.1283, 0.3935, 0.928)
pq = ggplot(data.frame(qq_plot_data), aes(sample=qq_plot_data)) + stat_qq(distribution=stats::qnorm) + stat_qq_line(distribution=stats::qnorm)
library(ggplot2)
pq = ggplot(data.frame(qq_plot_data), aes(sample=qq_plot_data)) + stat_qq(distribution=stats::qnorm) + stat_qq_line(distribution=stats::qnorm)
pq$coordinates
test = stat_qq(data.frame(qq_plot_data), aes(sample=qq_plot_data), distribution = stats:qnorm)
test = stat_qq(data.frame(qq_plot_data), aes(sample=qq_plot_data), distribution = stats::qnorm)
qnorm(37/42)
qnorm(14/16)
qnorm((4-3/8)/(5+1/4))
qnorm((4-1/3)/(5+1/3)
)
ggplot(faithful, aes(x=eruptions)) + geom_histogram()
##################### Klausur 1 ##################################################################
# Exercise 1 Plots
library(ggplot2)
ggplot(faithful, aes(x=eruptions)) + geom_histogram()
ggplot(faithful, aes(x=eruptions)) + geom_histogram(binwidth = 0.01) + labs(x)
ggplot(faithful, aes(x=eruptions)) + geom_histogram(binwidth = 0.01) + labs(x="Dauer Ausbruch [min]", y="Dichte")
ggplot(faithful, aes(x=eruptions)) + geom_histogram(aes(y=..density..), binwidth = 0.01) + labs(x="Dauer Ausbruch [min]", y="Dichte")
ggplot(faithful, aes(x=eruptions)) + geom_histogram(aes(y=..density..), binwidth = 0.005) + labs(x="Eruptionsdauer [min]", y="Dichte")
ggplot(faithful, aes(x=eruptions)) + geom_histogram(aes(y=..density..), binwidth = 0.001) + labs(x="Eruptionsdauer [min]", y="Dichte")
ggplot(faithful, aes(x=eruptions)) + geom_histogram(aes(y=..density..), binwidth = 1) + labs(x="Eruptionsdauer [min]", y="Dichte")
ggplot(faithful, aes(x=eruptions)) + geom_histogram(aes(y=..density..), binwidth = 2) + labs(x="Eruptionsdauer [min]", y="Dichte")
############################### Probeklausur ###################################
# Exercise 1 Plots
library(DAAG)
library(DAAG)
ggplot(progression, aes(x=year, y = Time, color=race)) +
geom_line() +
geom_point() +
labs(x="Jahr", y="Zeit [min]")
ggplot(progression[, progression$race=="Marathon"], aes(x=year, y = Time)) +
geom_line() +
geom_point()
progression
ggplot(progression[progression$race=="Marathon",], aes(x=year, y = Time)) +
geom_line() +
geom_point()
ggplot(progression[progression$race=="Marathon",], aes(x=year, y = Time)) +
geom_line() +
geom_point() +
labs(x="Jahr", y="")
ggplot(progression[progression$race=="Marathon",], aes(x=year, y = Time)) +
geom_line() +
geom_point() +
labs(x="Jahr", y="Bestzeit")
ggplot(austpop, aes(x=year, y=Qld)) + geom_line() + geom_point()
ggplot(austpop, aes(x=year, y=Qld)) + geom_line() + geom_point() + ylim(c(0,10000))
ggplot(austpop, aes(x=year, y=Qld)) + geom_line() + geom_point() + ylim(c(0,100
00))
ggplot(austpop, aes(x=year, y=Qld)) + geom_line() + geom_point() + ylim(c(0,100000))
ggplot(austpop, aes(x=year, y=Qld)) + geom_line() + geom_point() + ylim(c(0,100000)) +
labs(x="Jahr", y="Einwohnerzahl Queensland, Australien")
head(codling)
ggplot(codling, aes(x=tot, y=dead, color=dose)) + geom_point()
codling2 <- codling
codling$dose_f <- as.factor(codling$dose)
ggplot(codling, aes(x=tot, y=dead, color=dose_f)) + geom_point()
ggplot(codling, aes(x=tot, y=dead, color=dose_f)) + geom_point() +
labs(x="Anzahl Insekten", y="Anzahl toter Insekten") +
theme(legend.position = "none")
ggplot(codling, aes(x=tot, y=dead, group=dose_f)) + geom_point(aes(shape=dose_f)) +
labs(x="Anzahl Insekten", y="Anzahl toter Insekten") +
theme(legend.position = "none")
head(greatLakes)
greatLakes
head(intersalt)
unique(intersalt$country)
milk
ggplot(tree, aes(x="", y=x, fill=Group.1)) + geom_bar(position="stack", stat="identity") +
theme_void() +
labs(fill="Baumart")+
ggtitle("Mittlerer Durchmesser auf Brusthöhe [m]")
tree <- aggregate(rainforest$dbh, by=list(rainforest$species), mean)
ggplot(tree, aes(x="", y=x, fill=Group.1)) + geom_bar(position="stack", stat="identity") +
theme_void() +
labs(fill="Baumart")+
ggtitle("Mittlerer Durchmesser auf Brusthöhe [m]")
ggplot(tree, aes(x="", y=x, fill=Group.1)) + geom_bar(position="stack", stat="identity") +
labs(fill="Baumart")
ggplot(tree, aes(x="", y=x, fill=Group.1)) + geom_bar(position="stack", stat="identity") +
labs(fill="Baumart", x="", y="Mittlerer Durchmesser auf Brusthöhe [cm]")
ggplot(tree, aes(x="", y=x, fill=Group.1)) + geom_bar(position="stack", stat="identity") +
labs(fill="Baumart", x="", y="Mittlerer Durchmesser auf Brusthöhe [cm]") +
scale_fill_grey()
seedrates
unique(seedrates$rate)
head(sorption)
ggplot(sorption, aes(x=ct, y=m5, group=year)) + geom_point(aes(shape=year)) +
labs(x="Anzahl Insekten", y="Anzahl toter Insekten") +
theme(legend.position = "none")
ggplot(spam7, aes(x=crl.tot, y=dollar, group=yesno)) + geom_point(aes(shape=yesno)) +
labs(x="Anzahl Insekten", y="Anzahl toter Insekten") +
theme(legend.position = "none")
ggplot(spam7, aes(x=make, y=dollar, group=yesno)) + geom_point(aes(shape=yesno)) +
labs(x="Anzahl Insekten", y="Anzahl toter Insekten") +
theme(legend.position = "none")
ggplot(tinting, aes(x=csoa, y=it, group=tint)) + geom_point(aes(shape=tint)) +
labs(x="Anzahl Insekten", y="Anzahl toter Insekten") +
theme(legend.position = "none")
test = c(1,2,3)
matrix = array(c(1,2,3,4,5,6), dim=c(3,2))
View(matrix)
matrix = array(c(1,2,3,4,5,6), dim=c(2,3))
matrix*test
matrix %*% test
ggplot(tinting, aes(x=csoa, y=it, group=tint)) + geom_point(aes(shape=tint)) +
labs(x="Anzahl Insekten", y="Anzahl toter Insekten") +
theme(legend.position = "none")
library(ggplot2)
library(DAAG)
ggplot(tinting, aes(x=csoa, y=it, group=tint)) + geom_point(aes(shape=tint)) +
labs(x="Anzahl Insekten", y="Anzahl toter Insekten") +
theme(legend.position = "none")
ggplot(tinting, aes(x=csoa, y=it, group=tint)) + geom_point(aes(shape=tint)) +
labs(x="Zeit um alphanumerisches Elemt zu erkennen [ms]", y="Zeit für Unterscheidungsaufgabe [ms]") +
theme(legend.position = "none")
ggplot(tinting, aes(x=csoa, y=it, group=as.factor(tint)) + geom_point(aes(shape=tint)) +
)
ggplot(tinting, aes(x=csoa, y=it, group=as.factor(tint))) + geom_point(aes(shape=tint)) +
labs(x="Zeit um alphanumerisches Elemt zu erkennen [ms]", y="Zeit für Unterscheidungsaufgabe [ms]") +
theme(legend.position = "none")
ggplot(tinting, aes(x=csoa, y=it, group=tint)) + geom_point(aes(shape=tint)) +
labs(x="Zeit um alphanumerisches Elemt zu erkennen [ms]", y="Zeit für Unterscheidungsaufgabe [ms]") +
theme(legend.position = "none")
# Exercise 3
data = round(rnorm(5, 6.5, 0.5), 2)
data
paste(data, collapse = ', ')
ggplot(tinting, aes(x=csoa, y=it, group=tint)) + geom_point(aes(shape=tint)) +
labs(x="Zeit um alphanumerisches Element zu erkennen [ms]", y="Zeit für Unterscheidungsaufgabe [ms]") +
theme(legend.position = "none")
qt(c(0.9, 0.95, 0.975, 0.99), df = 9)
round(qt(c(0.9, 0.95, 0.975, 0.99), df = 9), 2)
round(qt(c(0.9, 0.95, 0.975, 0.99), df = 10), 2)
install.packages("renv")
library(renv)
renv::init()
library(ggplot2)
library(DAAG)
library(datasets)
ggplot(cars, aes(x=speed, y=dist))+ geom_point()
# Exercise 1 Plots
ggplot(cars, aes(x=speed, y=dist))+ geom_point() + labs(x="", y="")
ggplot(BOD, aes(x=Time, y=demand)) + geom_line() + labs(x="Zeit [Tage]", y="Biochemischer Sauerstoffbedarf")
ggplot(BOD, aes(x=Time, y=demand)) + geom_line() + labs(x="Zeit [Tage]", y="Biochemischer Sauerstoffbedarf") + xlim(c(0,20))
ggplot(ChickWeight, aes(x=weight)) + geom_histogram(aes(y=..density..), binwidth = 1)
ggplot(ChickWeight, aes(x=weight)) + geom_histogram(binwidth = 1)
ggplot(ChickWeight, aes(x=weight)) + geom_histogram(binwidth = 0.5)
ggplot(ChickWeight, aes(x=weight)) + geom_histogram(binwidth = 0.5) + labs(x="Gewicht [g]", y="absolute Häufigkeit")
ggplot(ChickWeight, aes(x=Time, y=weight, group=Diet)) + geom_point(aes(shape=Diet))
ggplot(ChickWeight, aes(x=Time, y=weight)) + geom_point()
ggplot(ChickWeight, aes(x=Time, y=weight)) + geom_point() + labs(y="Gewicht [g]", x="Alter [Tage]")
hair = aggregate(HairEyeColor$Hair, by=list(), count)
head(HairEyeColor)
head(HairEyeColor[,,1])
head(sum(HairEyeColor[,,1])
)
head(roeSums(HairEyeColor[,,1])
)
head(rowSums(HairEyeColor[,,1]))
hair = rowSums(HairEyeColor[,,1])/sum(HairEyeColor[,,1])
ggplot(hair, aes(x="", y=hiarColor)) + geom_bar(stat="identity", width=1) + coord_polar("y", start=0) +
theme_void()
hair = rowSums(HairEyeColor[,,1])/sum(HairEyeColor[,,1])
hair = data.frame(hairColor=hair)
ggplot(hair, aes(x="", y=hiarColor)) + geom_bar(stat="identity", width=1) + coord_polar("y", start=0) +
theme_void()
ggplot(hair, aes(x="", y=hairColor)) + geom_bar(stat="identity", width=1) + coord_polar("y", start=0) +
theme_void()
View(hair)
ggplot(hair, aes(x="", y=hairColor, fill=rownames(hair))) + geom_bar(stat="identity", width=1) + coord_polar("y", start=0) +
theme_void()
ggplot(hair, aes(x="", y=hairColor, fill=rownames(hair))) + geom_bar(stat="identity", width=1) + coord_polar("y", start=0) +
theme_void() +
theme(legend.position = "none")
ggplot(hair, aes(x="", y=hairColor, fill=rownames(hair))) + geom_bar(stat="identity", width=1) + coord_polar("y", start=0) +
theme_void() +
theme(legend.position = "none") +
scale_fill_grey()
rnorm(5, mean=1017, sd=1)
round(rnorm(5, mean=1017, sd=1), 2)
library(ggplot2)
library(DAAG)
library(datasets)
head(rainforest)
rainforest[rainforest$species == "Acacia mabellae",]
1-dpois(30, lambda=0.1)
1-dpois(30, lambda=10)
1-ppois(30, lambda=10)
1-ppois(30, lambda=18)
25+100*63^2
pnorm(63, mean =63, sd=5) - pnorm(60, mean =63, sd=5)
pnorm(62, mean =63, sd=5) - pnorm(60, mean =63, sd=5)
104.2-1.4
102.8/4
1.4+25.7
+25.7
1.4+ 2* 25.7
1.4+ 3* 25.7
1.4+ 4 25.7
1.4+ 4 *25.7
7/15
6/15
1/15
0.47+0.4+0.14
(1017.12 + 1016.75 + 1016.6 + 1015.99 + 1018.36)/5
data = c(1017.12, 1016.75, 1016.60, 1015.99, 1018.36)
mean(data)
var(data)
range(data)
1018.36-1015.99
choose(10,2)
seeds <- c(22, 11)
library(Barycenter)
library(transport)
# set up a, b and c
n <- 10
a <- b <- c <- matrix(rep(0, n^2), n, n)
a[8, 2:8] <- 1
a[4:7,8] <- 1
a <- a/sum(a)
b[7, 1:7] <- 1
b[3:6,7] <- 1
b <- b/sum(b)
c[10, 2:8] <- 1
c[4:7,9] <- 1
c <- c/sum(c)
tplan_ab <- transport::transport(transport::pgrid(a), transport::pgrid(b), p = 2)
tplan_ab_mat <- matrix(rep(0, n^4), n^2, n^2)
for (i in 1:nrow(tplan_ab)){
tplan_ab_mat[tplan_ab$from[i], tplan_ab$to[i]] <- tplan_ab$mass[i]
}
tplan_ac <- transport::transport(transport::pgrid(a), transport::pgrid(c), p = 2)
tplan_ac_mat <- matrix(rep(0, n^4), n^2, n^2)
for (i in 1:nrow(tplan_ac)){
tplan_ac_mat[tplan_ac$from[i], tplan_ac$to[i]] <- tplan_ac$mass[i]
}
# grid
grid <- expand.grid(y=seq(0.05, 0.95, 0.1), x=seq(0.05, 0.95, 0.1))
costm <- as.matrix(dist(grid, diag=TRUE, upper=TRUE))
results_ab <- Barycenter::Greenkhorn(a, b, costm)
results_ac <- Barycenter::Greenkhorn(a, c, costm)
image(results_ab$Transportplan, axes=FALSE, asp=1)
colorbar.plot()
install.packages(plot.matrix)
install.packages("plot.matrix")
plot.matrix(results_ab$Transportplan, axes=FALSE, asp=1)
library(plot.matrix)
plot.matrix(results_ab$Transportplan, axes=FALSE, asp=1)
plot(results_ab$Transportplan, axes=FALSE, asp=1)
plot(results_ab$Transportplan)
par(mar=c(5.1, 4.1, 4.1, 4.1)) # adapt margins
plot(results_ab$Transportplan)
par(mar=c(5.1, 4.1, 4.1, 4.1)) # adapt margins
plot(results_ab$Transportplan, asp=1, main="")
plot(results_ab$Transportplan, main="")
par(mar=c(5.1, 4.1, 4.1, 4.1), pty="s") # adapt margins
plot(results_ab$Transportplan, main="", xlab = "from", ylab = "to")
tryCatch(
{
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
},
error=function(cond){
if (identical(cond, "RStudio not running")){
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
})
library(Barycenter)
library(transport)
library(plot.matrix)
# set up a, b and c
n <- 10
a <- b <- c <- matrix(rep(0, n^2), n, n)
a[8, 2:8] <- 1
a[4:7,8] <- 1
a <- a/sum(a)
b[7, 1:7] <- 1
b[3:6,7] <- 1
b <- b/sum(b)
c[10, 2:8] <- 1
c[4:7,9] <- 1
c <- c/sum(c)
# calculate tplans
tplan_ab <- transport::transport(transport::pgrid(a), transport::pgrid(b), p = 2)
tplan_ac <- transport::transport(transport::pgrid(a), transport::pgrid(c), p = 2)
# convert tplans to full matrices
tplan_ab_mat <- matrix(rep(0, n^4), n^2, n^2)
for (i in 1:nrow(tplan_ab)){
tplan_ab_mat[tplan_ab$from[i], tplan_ab$to[i]] <- tplan_ab$mass[i]
}
tplan_ac_mat <- matrix(rep(0, n^4), n^2, n^2)
for (i in 1:nrow(tplan_ac)){
tplan_ac_mat[tplan_ac$from[i], tplan_ac$to[i]] <- tplan_ac$mass[i]
}
# calculate sinkhorn plans
# set up grid and cost matrix
grid <- expand.grid(y=seq(0.05, 0.95, 0.1), x=seq(0.05, 0.95, 0.1))
costm <- as.matrix(dist(grid, diag=TRUE, upper=TRUE))
# do actual calculations
results_ab <- Barycenter::Greenkhorn(a, b, costm)
results_ac <- Barycenter::Greenkhorn(a, c, costm)
##### do the plotting #################################################
pdf("../results/sinhorn_image1_image2.pdf")
par(mar=c(5.1, 4.1, 4.1, 4.1), pty="s") # adapt margins
plot(results_ab$Transportplan, main="", xlab = "from", ylab = "to")
dev.off()
pdf("../results/tplan_image1_image2.pdf")
par(mar=c(5.1, 4.1, 4.1, 4.1), pty="s") # adapt margins
plot(tplan_ab_mat, main="", xlab = "from", ylab = "to")
dev.off()
pdf("../results/sinhorn_image1_image3.pdf")
par(mar=c(5.1, 4.1, 4.1, 4.1), pty="s") # adapt margins
plot(results_ac$Transportplan, main="", xlab = "from", ylab = "to")
dev.off()
pdf("../results/tplan_image1_image3.pdf")
par(mar=c(5.1, 4.1, 4.1, 4.1), pty="s") # adapt margins
plot(tplan_ac_mat, main="", xlab = "from", ylab = "to")
dev.off()
